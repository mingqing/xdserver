// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/mingqing/xdserver/v1/microservice.proto

package xdserverv1

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	v1 "github.com/grpc-kit/pkg/api/known/status/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MingqingXdserverClient is the client API for MingqingXdserver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MingqingXdserverClient interface {
	HealthCheck(ctx context.Context, in *v1.HealthCheckRequest, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error)
	Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error)
	FetchEndpoints(ctx context.Context, in *v3.DiscoveryRequest, opts ...grpc.CallOption) (*v3.DiscoveryResponse, error)
	StreamEndpoints(ctx context.Context, opts ...grpc.CallOption) (MingqingXdserver_StreamEndpointsClient, error)
}

type mingqingXdserverClient struct {
	cc grpc.ClientConnInterface
}

func NewMingqingXdserverClient(cc grpc.ClientConnInterface) MingqingXdserverClient {
	return &mingqingXdserverClient{cc}
}

func (c *mingqingXdserverClient) HealthCheck(ctx context.Context, in *v1.HealthCheckRequest, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error) {
	out := new(v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/default.api.mingqing.xdserver.v1.MingqingXdserver/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mingqingXdserverClient) Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error) {
	out := new(DemoResponse)
	err := c.cc.Invoke(ctx, "/default.api.mingqing.xdserver.v1.MingqingXdserver/Demo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mingqingXdserverClient) FetchEndpoints(ctx context.Context, in *v3.DiscoveryRequest, opts ...grpc.CallOption) (*v3.DiscoveryResponse, error) {
	out := new(v3.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/default.api.mingqing.xdserver.v1.MingqingXdserver/FetchEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mingqingXdserverClient) StreamEndpoints(ctx context.Context, opts ...grpc.CallOption) (MingqingXdserver_StreamEndpointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MingqingXdserver_ServiceDesc.Streams[0], "/default.api.mingqing.xdserver.v1.MingqingXdserver/StreamEndpoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &mingqingXdserverStreamEndpointsClient{stream}
	return x, nil
}

type MingqingXdserver_StreamEndpointsClient interface {
	Send(*v3.DiscoveryRequest) error
	Recv() (*v3.DiscoveryResponse, error)
	grpc.ClientStream
}

type mingqingXdserverStreamEndpointsClient struct {
	grpc.ClientStream
}

func (x *mingqingXdserverStreamEndpointsClient) Send(m *v3.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mingqingXdserverStreamEndpointsClient) Recv() (*v3.DiscoveryResponse, error) {
	m := new(v3.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MingqingXdserverServer is the server API for MingqingXdserver service.
// All implementations should embed UnimplementedMingqingXdserverServer
// for forward compatibility
type MingqingXdserverServer interface {
	HealthCheck(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)
	Demo(context.Context, *DemoRequest) (*DemoResponse, error)
	FetchEndpoints(context.Context, *v3.DiscoveryRequest) (*v3.DiscoveryResponse, error)
	StreamEndpoints(MingqingXdserver_StreamEndpointsServer) error
}

// UnimplementedMingqingXdserverServer should be embedded to have forward compatible implementations.
type UnimplementedMingqingXdserverServer struct {
}

func (UnimplementedMingqingXdserverServer) HealthCheck(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMingqingXdserverServer) Demo(context.Context, *DemoRequest) (*DemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demo not implemented")
}
func (UnimplementedMingqingXdserverServer) FetchEndpoints(context.Context, *v3.DiscoveryRequest) (*v3.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchEndpoints not implemented")
}
func (UnimplementedMingqingXdserverServer) StreamEndpoints(MingqingXdserver_StreamEndpointsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEndpoints not implemented")
}

// UnsafeMingqingXdserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MingqingXdserverServer will
// result in compilation errors.
type UnsafeMingqingXdserverServer interface {
	mustEmbedUnimplementedMingqingXdserverServer()
}

func RegisterMingqingXdserverServer(s grpc.ServiceRegistrar, srv MingqingXdserverServer) {
	s.RegisterService(&MingqingXdserver_ServiceDesc, srv)
}

func _MingqingXdserver_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MingqingXdserverServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/default.api.mingqing.xdserver.v1.MingqingXdserver/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MingqingXdserverServer).HealthCheck(ctx, req.(*v1.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MingqingXdserver_Demo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MingqingXdserverServer).Demo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/default.api.mingqing.xdserver.v1.MingqingXdserver/Demo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MingqingXdserverServer).Demo(ctx, req.(*DemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MingqingXdserver_FetchEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MingqingXdserverServer).FetchEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/default.api.mingqing.xdserver.v1.MingqingXdserver/FetchEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MingqingXdserverServer).FetchEndpoints(ctx, req.(*v3.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MingqingXdserver_StreamEndpoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MingqingXdserverServer).StreamEndpoints(&mingqingXdserverStreamEndpointsServer{stream})
}

type MingqingXdserver_StreamEndpointsServer interface {
	Send(*v3.DiscoveryResponse) error
	Recv() (*v3.DiscoveryRequest, error)
	grpc.ServerStream
}

type mingqingXdserverStreamEndpointsServer struct {
	grpc.ServerStream
}

func (x *mingqingXdserverStreamEndpointsServer) Send(m *v3.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mingqingXdserverStreamEndpointsServer) Recv() (*v3.DiscoveryRequest, error) {
	m := new(v3.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MingqingXdserver_ServiceDesc is the grpc.ServiceDesc for MingqingXdserver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MingqingXdserver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "default.api.mingqing.xdserver.v1.MingqingXdserver",
	HandlerType: (*MingqingXdserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _MingqingXdserver_HealthCheck_Handler,
		},
		{
			MethodName: "Demo",
			Handler:    _MingqingXdserver_Demo_Handler,
		},
		{
			MethodName: "FetchEndpoints",
			Handler:    _MingqingXdserver_FetchEndpoints_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEndpoints",
			Handler:       _MingqingXdserver_StreamEndpoints_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/mingqing/xdserver/v1/microservice.proto",
}
