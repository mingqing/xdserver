syntax = "proto3";

package default.api.mingqing.xdserver.v1;

option go_package = "github.com/mingqing/xdserver/api/mingqing/xdserver/v1;xdserverv1";

// 同服务内的 proto 文件使用相对路径引用，既不包含代码仓库前缀
import "api/mingqing/xdserver/v1/demo.proto";

// 引入依赖的外部 proto 文件
import "github.com/grpc-kit/api/known/status/v1/response.proto";
import "github.com/envoyproxy/envoy/api/envoy/service/discovery/v3/discovery.proto";

// 该微服务支持的 RPC 方法定义
service MingqingXdserver {
  rpc HealthCheck(grpc_kit.api.known.status.v1.HealthCheckRequest) returns (grpc_kit.api.known.status.v1.HealthCheckResponse) {}
  rpc Demo(DemoRequest) returns (DemoResponse) {}

  // eds rest 接口定义
  rpc FetchEndpoints(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse) {}

  // cds rest 接口定义
  rpc FetchClusters(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse) {}

  // rds rest 接口定义
  rpc FetchRoutes(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse) {}

  // lds rest 接口定义
  rpc FetchListeners(envoy.service.discovery.v3.DiscoveryRequest) returns (envoy.service.discovery.v3.DiscoveryResponse) {}
}
